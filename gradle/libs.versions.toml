[versions]
jooq = "3.19.16"
junit = "5.10.2"
kotlin = "1.9.25"
kotlinCoroutines = "1.10.1"
kotest = "5.9.1"
kotestSpring = "1.3.0"
kotestTestcontainers = "2.0.2"
kotestWiremock = "3.0.1"
mockk = "1.13.13"
reactorTest = "3.7.1"
springBoot = "3.2.4"
springMockk = "4.0.2"
testcontainers = "1.20.4"
wiremock = "3.10.0"

[libraries]
# Assorted
flywayCore = { module = "org.flywaydb:flyway-core" }
logback = { module = "ch.qos.logback:logback-classic" }
jacksonModuleKotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin" }
kotest = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotestSpring = { module = "io.kotest.extensions:kotest-extensions-spring", version.ref = "kotestSpring" }
kotestTestcontainers = { module = "io.kotest.extensions:kotest-extensions-testcontainers", version.ref = "kotestTestcontainers" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
springMockk = { module = "com.ninja-squad:springmockk", version.ref = "springMockk" }
snakeYaml = { module = "org.yaml:snakeyaml" }
wiremock = { module = "org.wiremock:wiremock", version.ref = "wiremock" }

# jOOQ
jooq = { module = "org.jooq:jooq", version.ref = "jooq" }
jooqCodegen = { module = "org.jooq:jooq-codegen", version.ref = "jooq" }
jooqMeta = { module = "org.jooq:jooq-meta", version.ref = "jooq" }
jooqKotlin = { module = "org.jooq:jooq-kotlin", version.ref = "jooq" }
jooqKotlinCoroutines = { module = "org.jooq:jooq-kotlin-coroutines", version.ref = "jooq" }
jooqPostgresExtensions = { module = "org.jooq:jooq-postgres-extensions", version.ref = "jooq" }

# Kotlin coroutines
kotlinCoroutinesCore = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinCoroutines" }
kotlinCoroutinesReactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "kotlinCoroutines" }
kotlinCoroutinesSlf4j = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j", version.ref = "kotlinCoroutines" }
kotlinCoroutinesTest = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinCoroutines" }
reactorTest = { module = "io.projectreactor:reactor-test", version.ref = "reactorTest" }

# Postgres
postgresJdbc = { module = "org.postgresql:postgresql" }
postgresR2dbc = { module = "org.postgresql:r2dbc-postgresql" }

# Spring Boot
springBootDependencies = { module = "org.springframework.boot:spring-boot-dependencies", version.ref = "springBoot" }
springBootDevtools = { module = "org.springframework.boot:spring-boot-devtools" }
springBootDockerCompose = { module = "org.springframework.boot:spring-boot-docker-compose" }
springBootStarter = { module = "org.springframework.boot:spring-boot-starter" }
springBootStarterDataR2dbc = { module = "org.springframework.boot:spring-boot-starter-data-r2dbc" }
springBootStarterJooq = { module = "org.springframework.boot:spring-boot-starter-jooq" }
springBootStarterR2dbc = { module = "org.springframework.boot:spring-boot-starter-r2dbc" }
springBootStarterTest = { module = "org.springframework.boot:spring-boot-starter-test" }
springBootStarterWebflux = { module = "org.springframework.boot:spring-boot-starter-webflux" }

# Testcontainers
testcontainersBom = { module = "org.testcontainers:testcontainers-bom", version.ref = "testcontainers" }
testcontainersJava = { module = "org.testcontainers:testcontainers" }
testcontainersJunit = { module = "org.testcontainers:junit-jupiter" }
testcontainersPostgres = { module = "org.testcontainers:postgresql" }
testcontainersR2dbc = { module = "org.testcontainers:r2dbc" }

# Gradle plugins
kotlinGradle = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }

[bundles]
kotlinCoroutines = ["kotlinCoroutinesCore", "kotlinCoroutinesReactor", "kotlinCoroutinesSlf4j"]
jooq = ["jooq", "jooqKotlin", "jooqKotlinCoroutines", "jooqPostgresExtensions"]

[plugins]
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
springBoot = { id = "org.springframework.boot", version.ref = "springBoot" }
